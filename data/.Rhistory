label = paste("HB =", round(HB, 5), "%", "\nREDTA =", round(REDTA, 5), "%h"),
hjust = 1, vjust = 1, color = "black", size = 4)
})
output$resultsTable <- renderTable({
req(data())
sportif <- data()
results_sportif <- results %>%
filter(stage == sportif$selected_stage)
return(results_sportif)
})
}
shinyApp(ui = ui, server = server)
sportifs
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
# Charger les fonctions depuis des fichiers externes
source("read_asc.R")
source("step1.R")
source("step2.R")
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
# Charger les fonctions depuis des fichiers externes
source("read_asc.R")
source("step1.R")
source("step2.R")
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2")
# Charger les fonctions depuis des fichiers externes
source("read_asc.R")
source("step1.R")
source("step2.R")
source("step1.R")
source("step1.R")
####renderPlot.R
#Charger les données
data <- read.csv("path_to_your_file.asc", skip = 20, header = FALSE, sep = ",", stringsAsFactors = FALSE)
# Générer le graphique
plot <- render_spo2_plot(data)
# Afficher le graphique
print(plot)
####renderPlot.R
#Charger les données
data <- read.csv("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/DODET SANDRA - 09-08-2023.asc", skip = 20, header = FALSE, sep = ",", stringsAsFactors = FALSE)
# Générer le graphique
plot <- render_spo2_plot(data)
runApp('Test app.R')
source("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R", echo=TRUE)
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
# Fonction pour lire un fichier .asc
read_asc <- function(file_path) {
data <- read.csv(file_path, skip = 20, header = FALSE, sep = ",", stringsAsFactors = FALSE)
return(data)
}
results <- read_csv('results.csv')
View(results)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
donnees$duree_cumulee
source("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/step1.R", echo=TRUE)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
View(donnees)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
?fluidPage
library(boot)
install.packages("bslib")
?page_navbar
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
inverse = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
inverse = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
library(shiny)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(DescTools)
library(zoo)
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
# Fonction pour lire un fichier .asc
read_asc <- function(file_path) {
data <- read.csv(file_path, skip = 20, header = FALSE, sep = ",", stringsAsFactors = FALSE)
return(data)
}
results <- read_csv('results.csv')
# Répertoire racine où se trouvent les dossiers des stages
root_dir <- "~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD"
# Liste des stages
stages <- list.dirs(root_dir, recursive = FALSE)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
inverse = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
library(bslib)
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
# Fonction pour lire un fichier .asc
read_asc <- function(file_path) {
data <- read.csv(file_path, skip = 20, header = FALSE, sep = ",", stringsAsFactors = FALSE)
return(data)
}
results <- read_csv('results.csv')
# Répertoire racine où se trouvent les dossiers des stages
root_dir <- "~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD"
# Liste des stages
stages <- list.dirs(root_dir, recursive = FALSE)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
inverse = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
theme  = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
theme  = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
ui <- page_navbar(
title = "HYPOXPERF - SpO2",
bg = "#2D89C8",
inverse  = TRUE,
nav_panel(title = "Vue par athlètes", p("First page content.")),
nav_panel(title = "Vue globale", p("Second page content.")),
nav_spacer()
)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
source("~/.active-rstudio-document", echo=TRUE)
library(shiny)
library(bslib)
library(ggplot2)
data(penguins, package = "palmerpenguins")
install.packages(palmerpenguins)
install.packages('palmerpenguins')
library(shiny)
library(bslib)
library(ggplot2)
data(penguins, package = "palmerpenguins")
# Define UI for random distribution app ----
# Sidebar layout with input and output definitions ----
ui <- page_sidebar(
title = "Penguins dashboard",
sidebar = sidebar(
bg = "white",
accordion(
accordion_panel(
"Primary controls",
varSelectInput(
"color_by", "Color by",
penguins[c("species", "island", "sex")],
selected = "species"
)
),
accordion_panel(
"Other controls",
"Other controls go here"
)
)
),
accordion(
open = c("Bill Length", "About"),
accordion_panel(
"Bill Length",
plotOutput("bill_length")
),
accordion_panel(
"Bill Depth",
plotOutput("bill_depth")
),
accordion_panel(
"Body Mass",
plotOutput("body_mass")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
gg_plot <- reactive({
ggplot(penguins) +
geom_density(aes(fill = !!input$color_by), alpha = 0.2) +
theme_bw(base_size = 16) +
theme(axis.title = element_blank())
})
output$bill_length <- renderPlot(gg_plot() + aes(bill_length_mm))
output$bill_depth <- renderPlot(gg_plot() + aes(bill_depth_mm))
output$body_mass <- renderPlot(gg_plot() + aes(body_mass_g))
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
?file.path
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/TestAPP2.R')
library(readxl)
library(tidyverse)
library(ggplot2)
setwd("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD")
results <- results <- read_csv('results.csv')
#filtre sur un athlète
results_a1 <- results
#filtre sur un athlète
results_a1 <- results %>%
filter(Athletes == 'Baptiste PASSEMARD')
#filtre sur un athlète
results_a1 <- results %>%
filter(Athlete == 'Baptiste PASSEMARD')
View(results_a1)
#filtre sur un athlète
results_a1 <- results %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
group_by(Stage) %>%
mutate(Count = row_number()) %>%
ungroup()
ggplot(results_a1,
aes(x = Count, y = HB))+
geom_line(color="red")
ggplot(results_a1, aes(x = Count, y = HB, group = Stage, color = Stage)) +
geom_line() +
labs(title = "Évolution de HB par Stage",
x = "Count",
y = "HB",
color = "Stage") +
theme_minimal()
ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000), group = Stage, stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000, group = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
results_a1 <- results_a1 %>%
mutate(DateFormatted = extract_and_format_date(File))
# Fonction pour extraire et formater la date
extract_and_format_date <- function(file_name) {
# Extraire la date du nom de fichier
date_part <- str_extract(file_name, "\\d{2}-\\d{2}-\\d{4}")
# Convertir la date en objet Date
date_obj <- dmy(date_part)
# Formater la date en AAAA-MM-JJ
formatted_date <- format(date_obj, "%Y-%m-%d")
return(formatted_date)
}
results_a1 <- results_a1 %>%
mutate(DateFormatted = extract_and_format_date(File))
# Fonction pour extraire et formater la date
extract_and_format_date <- function(file_name) {
# Extraire la date du nom de fichier
date_part <- str_extract(file_name, "\\d{2}-\\d{2}-\\d{4}")
# Convertir la date en objet Date
date_obj <- dmy(date_part)
# Formater la date en AAAA-MM-JJ
formatted_date <- format(date_obj, "%Y-%m-%d")
return(formatted_date)
}
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File))
filter(Athlete == 'Baptiste PASSEMARD') %>%
group_by(Stage) %>%
mutate(Count = row_number()) %>%
ungroup()
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
group_by(Stage) %>%
mutate(Count = row_number()) %>%
ungroup()
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
order(DateFormatted)
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
order(DateFormatted)
results <- results <- read_csv('results.csv')
# Fonction pour extraire et formater la date
extract_and_format_date <- function(file_name) {
# Extraire la date du nom de fichier
date_part <- str_extract(file_name, "\\d{2}-\\d{2}-\\d{4}")
# Convertir la date en objet Date
date_obj <- dmy(date_part)
# Formater la date en AAAA-MM-JJ
formatted_date <- format(date_obj, "%Y-%m-%d")
return(formatted_date)
}
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
order(DateFormatted)
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
order_by(DateFormatted)
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
arrange(DateFormatted)
#filtre sur un athlète
results_a1 <- results %>%
mutate(DateFormatted = extract_and_format_date(File)) %>%
filter(Athlete == 'Baptiste PASSEMARD') %>%
arrange(DateFormatted) %>%
group_by(Stage) %>%
mutate(Count = row_number()) %>%
ungroup()
ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
fig1 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
View(fig1)
fig2 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = REDTA, group = Stage, color = Stage)) +
geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
plot(fig1,fig2)
grid.arrange(fig1, fig2, ncol = 2)
library(gridExtra)
grid.arrange(fig1, fig2, ncol = 2)
library(dplyr)
grid.arrange(fig1, fig2, ncol = 2)
fig1 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
#geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
fig2 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = REDTA, group = Stage, color = Stage)) +
#geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
grid.arrange(fig1, fig2, ncol = 2)
fig1 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = HB, group = Stage, color = Stage)) +
#geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
fig2 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = REDTA, group = Stage, color = Stage)) +
#geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de HB et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
grid.arrange(fig1, fig2, ncol = 2)
fig2 <- ggplot(results_a1, aes(x = Count)) +
geom_line(aes(y = REDTA, group = Stage, color = Stage)) +
#geom_bar(aes(y = DureeTotale / 1000, group = Stage, color = Stage), stat = "identity", fill = "gray80", alpha = 0.5) +
scale_y_continuous(
name = "HB",
sec.axis = sec_axis(~ . * 1000, name = "DureeTotale")
) +
labs(title = "Évolution de REDTA et DureeTotale par Stage",
x = "Count",
color = "Stage") +
theme_minimal()
grid.arrange(fig1, fig2, ncol = 2)
runApp('athlete-visualization-app')
runApp('_athlete-visualization-app')
runApp('_athlete-visualization-app')
source("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/renderPlot.R", echo=TRUE)
source("~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/renderPlot.R", echo=TRUE)
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD/_athlete-visualization-app')
runApp('~/Documents/DU DATAS/STAGE/HYPOXPERF - SpO2/PROD/_athlete-visualization-app')
